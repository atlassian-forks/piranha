/*
 * Copyright (C) 2017-2018. Uber Technologies Inc.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *    http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

import net.ltgt.gradle.errorprone.CheckSeverity
buildscript {
    repositories {
        mavenLocal()
        maven {
            url "http://packages.atlassian.com/artifactory/maven-private-local"
            credentials {
                username = ""
                password = ""
            }
        }
    }

    dependencies {
        classpath 'com.android.tools.build:gradle:3.5.0'
    }
}
plugins {
  id 'maven-publish'
  id "com.jfrog.artifactory" version "4.24.20"
  id "com.github.sherter.google-java-format" version "0.8"
  id "net.ltgt.errorprone" version "2.0.2" apply false
  id "com.github.nbaztec.coveralls-jacoco" version "1.2.5" apply false
}

repositories {
    mavenLocal()
}

apply from: "gradle/dependencies.gradle"

subprojects { project ->
    project.apply plugin: "maven-publish"
    project.apply plugin: "net.ltgt.errorprone"
    project.dependencies {
        errorprone deps.build.errorProneCore
        errorproneJavac deps.build.errorProneJavac
    }
    project.tasks.withType(JavaCompile) {
        dependsOn(installGitHooks)
        options.compilerArgs += [
            "-Xlint:unchecked",
            "-Xlint:rawtypes"
        ]
        options.errorprone {
            // disable warnings in generated code; AutoValue code fails UnnecessaryParentheses check
            disableWarningsInGeneratedCode = true
            // this check is too noisy
            check("StringSplitter", CheckSeverity.OFF)
            check("WildcardImport", CheckSeverity.ERROR)
        }
    }
    if (project.plugins.hasPlugin('java')) {
        publishing {
            publications {
                maven(MavenPublication) {
                    groupId = GROUP
                    artifactId = "piranha"
                    version = VERSION_NAME
                    from components.java
                }
            }
        }
    }

    repositories {
        mavenLocal()
        jcenter()
    }

}

googleJavaFormat {
  toolVersion = "1.6"
}

////////////////////////////////////////////////////////////////////////
//
//  Google Java Format pre-commit hook installation
//

tasks.register('installGitHooks', Copy) {
	from(file('config/hooks/pre-commit-stub')) {
		rename 'pre-commit-stub', 'pre-commit'
	}
	into file('../.git/hooks')
	fileMode 0777
}

artifactory {
    publish {
        contextUrl = 'http://packages.atlassian.com/artifactory'
        repository {
            repoKey = 'maven-private-local'
            username = ''
            password = ''
        }
        defaults {
            publications('maven')
            publishBuildInfo = true
            publishArtifacts = true
            publishPom = true
        }
    }
}

publishing {
    publications {
        maven(MavenPublication) {
            groupId = GROUP
            artifactId = "piranha"
            version = VERSION_NAME
        }
    }
}
